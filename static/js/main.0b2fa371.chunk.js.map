{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","animationDuration","infinite","useState","currentImg","setCurrentImage","maxCurrentImage","Math","min","length","moveImages","s","className","style","width","transform","transitionDuration","map","image","i","src","alt","height","type","disabled","onClick","App","state","this","onChangeImages","prevState","ev","setState","target","name","value","action","htmlFor","id","max","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b2fa371.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Prop = {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nconst Carousel: React.FC<Prop> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentImg, setCurrentImage] = useState(1);\n  const maxCurrentImage = Math.min(images.length - frameSize,\n    images.length - step) + 1;\n\n  const moveImages = (s: number) => {\n    if (infinite) {\n      switch (true) {\n        case currentImg === maxCurrentImage && currentImg + s > maxCurrentImage:\n          setCurrentImage(1);\n          break;\n\n        case currentImg === 1 && currentImg + s < 1:\n          setCurrentImage(maxCurrentImage);\n          break;\n\n        case currentImg + s > maxCurrentImage:\n          setCurrentImage(maxCurrentImage);\n          break;\n\n        case currentImg + s < 1:\n          setCurrentImage(1);\n          break;\n\n        default:\n          setCurrentImage(currentImg + s);\n      }\n    } else {\n      switch (true) {\n        case currentImg + s > maxCurrentImage:\n          setCurrentImage(maxCurrentImage);\n          break;\n\n        case currentImg + s < 1:\n          setCurrentImage(1);\n          break;\n\n        default:\n          setCurrentImage(currentImg + s);\n      }\n    }\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__container\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(-${(currentImg - 1) * itemWidth}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          {images.map((image, i) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`emoji${i}`}\n                className=\"Carousel__img\"\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          disabled={currentImg === 1 && !infinite}\n          onClick={() => moveImages(-step)}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          disabled={currentImg === maxCurrentImage && !infinite}\n          onClick={() => moveImages(step)}\n          data-cy=\"next\"\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const onChangeImages = (\n      prevState: State,\n      ev: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n      this.setState({\n        ...prevState,\n        [ev.target.name]: +ev.target.value,\n      });\n    };\n\n    return (\n      <div className=\"App\">\n\n        {/* eslint-disable-next-line */}\n        <h1 className=\"App__title\" data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form action=\"\" className=\"App__form\">\n          <fieldset className=\"App__fieldset\">\n            <legend>Settings:</legend>\n            <label htmlFor=\"itemWidth\" className=\"App__form-item\">\n              Image size\n              <input\n                type=\"number\"\n                name=\"itemWidth\"\n                id=\"itemWidth\"\n                value={itemWidth}\n                min={50}\n                max={250}\n                step={5}\n                onChange={(ev) => onChangeImages(this.state, ev)}\n              />\n            </label>\n            <label htmlFor=\"frameSize\" className=\"App__form-item\">\n              Frame size\n              <input\n                type=\"number\"\n                name=\"frameSize\"\n                id=\"frameSize\"\n                value={frameSize}\n                min={1}\n                max={10}\n                onChange={(ev) => onChangeImages(this.state, ev)}\n              />\n            </label>\n            <label htmlFor=\"step\" className=\"App__form-item\">\n              Step\n              <input\n                type=\"number\"\n                name=\"step\"\n                id=\"step\"\n                value={step}\n                min={1}\n                max={7}\n                onChange={(ev) => onChangeImages(this.state, ev)}\n              />\n            </label>\n            <label htmlFor=\"animationDuration\" className=\"App__form-item\">\n              Animation duration\n              <input\n                type=\"number\"\n                name=\"animationDuration\"\n                id=\"animationDuration\"\n                value={animationDuration}\n                min={700}\n                max={3000}\n                step={10}\n                onChange={(ev) => onChangeImages(this.state, ev)}\n              />\n            </label>\n            <label htmlFor=\"infinite\" className=\"App__form-item\">\n              Infinite\n              <input\n                type=\"checkbox\"\n                name=\"infinite\"\n                id=\"infinite\"\n                onChange={\n                  () => this.setState({ infinite: !infinite })\n                }\n              />\n            </label>\n          </fieldset>\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}